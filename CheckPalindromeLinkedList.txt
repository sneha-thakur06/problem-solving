/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 import java.util.Stack;
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode temp=head;
        Stack<Integer> stk=new Stack<>();
        while(temp!=null){
            stk.push(temp.val);
            temp=temp.next;
        }
        temp=head;
        while(temp!=null){
            if(stk.pop() !=temp.val){
              
                return false;
            }
              temp=temp.next;
        }
        return true;
    }
}


Time Complexity O(n)
Space complexity O(n)

Here 1st we have push all the node vale into the stack and the again assign the temp to head
Then we will compare both the value i.e temp.val == stack.pop() or not.
If equal then return true;
Otherwise false.........